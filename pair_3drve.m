%=============================================================================| 
% Copyright (C) 2015 Dr.-Ing. Arun Raina (E-Mail: arunraina@icloud.com)
% 
% This is free software: you can redistribute it and/or modify
% it under the terms of the GNU Lesser General Public License as published by
% the Free Software Foundation, either version 3 of the License, or
% (at your option) any later version.
#
% This code is distributed in the hope that it will be useful,
% but WITHOUT ANY WARRANTY; without even the implied warranty of
% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
% GNU Lesser General Public License for more details.
%
% You should have received a copy of the GNU Lesser General Public License
% along with this code. If not, see <http://www.gnu.org/licenses/>.
#=============================================================================| 
% 
% Generate periodic pairs of nodes for abaqus using *NSET for 
% a three-dimensional representative volumen element
% 
clear all; clc; close all;
format long e

% Read node number, x-, y-, z- coordinates from file nodeGCS generated by Abaqus
R = load('nodesGCS');
ilA=1; irA=1; ibA=1; itA=1;
ilB=1; irB=1; ibB=1; itB=1;
xL = min(R(:,2)); % x-coor on left surface
xR = max(R(:,2)); % x-coor on right surface
yB = min(R(:,3)); % y-coor on bottom surface
yT = max(R(:,3)); % y-coor on top surface
zB = min(R(:,4)); % z-coor on back surface
zF = max(R(:,4)); % z-coor on front surface
% Loop over all nodes
for i=1:length(R)
   % collect (x,y) boundary nodes from back surface
   if R(i,4)==zB
   if R(i,2)==xL  % left surface edge A       	
      leftA(ilA,1)= i;
      leftA(ilA,2)= R(i,3);
      ilA = ilA+1;
   end
   if R(i,2)==xR  % right surface edge A
      rightA(irA,1)= i;
      rightA(irA,2)= R(i,3);
      irA = irA+1;
   end
   if R(i,3)==yB  % bottom surface edge A
      bottomA(ibA,1)= i;
      bottomA(ibA,2)= R(i,2);
      ibA = ibA+1;
   end
   if R(i,3)==yT  % top surface edge A
      topA(itA,1)= i;
      topA(itA,2)= R(i,2);
      itA = itA+1; 
   end
   end
   % collect (x,y) boundary nodes from front surface
   if R(i,4)==zF
   if R(i,2)==xL  % left surface edge B
      leftB(ilB,1)= i;
      leftB(ilB,2)= R(i,3);
      ilB = ilB+1; 
   end
   if R(i,2)==xR  % right surface edge B
      rightB(irB,1)= i;
      rightB(irB,2)= R(i,3);
      irB = irB+1;
   end
   if R(i,3)==yB  % bottom surface edge B
      bottomB(ibB,1)= i;
      bottomB(ibB,2)= R(i,2);
      ibB = ibB+1;
   end
   if R(i,3)==yT  % top surface edge B
      topB(itB,1)= i;
      topB(itB,2)= R(i,2);
      itB = itB+1; 
   end
   end
end
disp('>> check if (1) ilA = ilB = irA = irB 2) itA = ibA = itB =ibB?');

% Sort above eight arrays by their coordinates
[sortL1,IL1] = sort(leftA);
[sortR1,IR1] = sort(rightA);
[sortB1,IB1] = sort(bottomA);
[sortT1,IT1] = sort(topA);
[sortL2,IL2] = sort(leftB);
[sortR2,IR2] = sort(rightB);
[sortB2,IB2] = sort(bottomB);
[sortT2,IT2] = sort(topB);

% Write above sorted arrays in terms of node labels  
for k = 1:ilA-1
    sorted_leftA(k)=leftA(IL1(k,2),1);
    sorted_rightA(k)=rightA(IR1(k,2),1);
end
for k = 1:itA-1
    sorted_bottomA(k)=bottomA(IB1(k,2),1);
    sorted_topA(k)=topA(IT1(k,2),1);
end
for k = 1:ilB-1
    sorted_leftB(k)=leftB(IL2(k,2),1);
    sorted_rightB(k)=rightB(IR2(k,2),1);
end
for k = 1:itB-1
    sorted_bottomB(k)=bottomB(IB2(k,2),1);
    sorted_topB(k)=topB(IT2(k,2),1);
end

% Concatenate arrays
sorted_left=[sorted_leftA sorted_leftB];
sorted_right=[sorted_rightA sorted_rightB];
sorted_top=[sorted_topA sorted_topB];
sorted_bottom=[sorted_bottomA sorted_bottomB];

% Generate nodal sets NSET for Abaqus
% *Nset, nset=bottom, unsorted, instance=Part-1-1
fileID = fopen('nset_output','w');
fprintf(fileID,'%12s\n','*Nset, nset=left, unsorted, instance=Part-1-1');
for m = 1:ilA+ilB-2
fprintf(fileID,'%7d%c',sorted_left(m),',');
end
fprintf(fileID,'\n%12s\n','*Nset, nset=right, unsorted, instance=Part-1-1');
for m = 1:irA+irB-2
fprintf(fileID,'%7d%c',sorted_right(m),',');
end
fprintf(fileID,'\n%12s\n','*Nset, nset=bottom, unsorted, instance=Part-1-1');
for m = 1:ibA+ibB-2
fprintf(fileID,'%7d%c',sorted_bottom(m),',');
end
fprintf(fileID,'\n%12s\n','*Nset, nset=top, unsorted, instance=Part-1-1');
for m = 1:itA+itB-2
fprintf(fileID,'%7d%c',sorted_top(m),',');
end

